AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation for Fargate.
Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: {{ cluster.name }}

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{{ cluster.logGroup }}}
      RetentionInDays: {{{ cluster.logsRetentionInDays }}}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: {{ cluster.name }}-{{ onboarding.name }}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      ExecutionRoleArn: !GetAtt 'ExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ContainerDefinitions:
        - Name: {{{ onboarding.name }}}
          Image: {{{ onboarding.image }}}:{{{ onboarding.version }}}
          PortMappings:
            - ContainerPort: {{{ onboarding.containerPort }}}
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{ cluster.name }}-{{ onboarding.name }}-ExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{ onboarding.name }}-TaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: {{ onboarding.name }}-pod-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - arn:aws:s3:::{{ onboarding.bucketName }}/*
                - arn:aws:s3:::{{ onboarding.bucketName }}
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:Describe*
              Resource:
                - !GetAtt 'LogGroup.Arn'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{ onboarding.name }}-AutoScalingRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: {{ onboarding.name }}-ServiceSecurityGroup
      VpcId: {{ cluster.vpc }}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: {{ onboarding.containerPort }}
          ToPort: {{ onboarding.containerPort }}
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: {{ onboarding.name }}-LoadBalancerSecurityGroup
      VpcId: {{ cluster.vpc }}

  LoadBalancerSecurityGroupInHttpFromWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'

  LoadBalancerSecurityGroupInHttpsFromWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTP
    Properties:
      ServiceName: {{ onboarding.name }}
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: {{ onboarding.minContainers }}
      HealthCheckGracePeriodSeconds: 10
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            {{#cluster.subnets.privates}}
            - {{.}}
            {{/cluster.subnets.privates}}
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: {{ onboarding.name }}
          ContainerPort: {{ onboarding.containerPort }}
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 5
      Port: {{ onboarding.containerPort }}
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: {{ cluster.vpc }}

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ListenerHTTPS:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTP
  #     Certificates:
  #       - CertificateArn: !Ref Certificate

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: 'routing.http2.enabled'
          Value: 'true'
      Name: {{ onboarding.name }}-LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        {{#cluster.subnets.publics}}
        - {{.}}
        {{/cluster.subnets.publics}}

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - Cluster
      - Service
    Properties:
      MinCapacity: {{ onboarding.minContainers }}
      MaxCapacity: {{ onboarding.maxContainers }}
      ResourceId: 'service/{{ cluster.name }}/{{ onboarding.name }}'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: {{ cluster.name }}-{{ onboarding.name }}-scale-up
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25

  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: {{ cluster.name }}-{{ onboarding.name }}-scale-down
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25

  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    DependsOn:
      - Cluster
      - Service
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {{ cluster.name }}
      - Name: ServiceName
        Value: {{ onboarding.name }}
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - !Ref ScaleUpPolicy

  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    DependsOn:
      - Cluster
      - Service
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {{ cluster.name }}
      - Name: ServiceName
        Value: {{ onboarding.name }}
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30
      AlarmActions:
      - !Ref ScaleDownPolicy

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: {{ cluster.hostedZoneId }}
      HostedZoneName: {{ cluster.domainName }}.
      Name: {{ onboarding.name }}.{{ cluster.domainName }}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt 'LoadBalancer.DNSName'
        HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'

Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Join ['', ['http://', !Ref DNSRecord]]
